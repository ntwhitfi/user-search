app: user-search

service:
  name: user-search-auth
  description: |
    This service is used to authenticate users for the user search service

frameworkVersion: ">=1.9.0 <2.0.0"

custom:
  props: ${file(env_config/${opt:stage, self:provider.stage}.yml)}
  authRequestModel:
    '{
       "username": {
         "type": "string"
       },
       "password": {
         "type": "string"
       }
     }'
package:
  artifact: ${self:custom.props.artifactPath}

provider:
  name: aws
  runtime: java8
  stage: dev
  region: ${self:custom.props.region}
  memorySize: ${self:custom.props.memorySize}
  timeout: ${self:custom.props.timeout}
  deploymentBucket: ${self:custom.props.deploymentBucketName}
  role: ${self:custom.props.lambdaRole}

functions:
  UserAuthHandler:
    handler: ntwhitfi.user.search.auth.handler.UserAuthHandler
    name: UserAuthHandler-${opt:stage, self:provider.stage}
    environment:
      USER_POOL_ID: ${self:custom.props.cognitoUserPoolId}
      CLIENT_ID: ${self:custom.props.cognitoClientId}
    events:
      - http:
          path: /auth
          method: POST
          request:
            parameters:
              application/json: ${self:custom.authRequestModel}
            template:
              application/json: '$input.body'
          integration: lambda

resources: # CloudFormation template syntax from here on.
  Resources:
    #Create SNS topic to handle sending the CloudWatch alarms
    UserAuthHandlerSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: UserAuthSNSTopic-${opt:stage, self:provider.stage}
        Subscription:
          - Endpoint: ${self:custom.props.sns.endpoint}
            Protocol: ${self:custom.props.sns.protocol}
        Tags: ${self:custom.props.tags}
        TopicName: UserAuthSNSTopic-${opt:stage, self:provider.stage}

    #UserAuthHandler CloudWatch Alarms.

    #Alarm to detect execution errors or errors invoking the lambda function
    UserAuthHandlerInvocationErrorAlarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "An error occurred while invoking the UserAuthHandler Lambda function."
        AlarmName:
          UserAuthHandler-${opt:stage, self:provider.stage}-ErrorAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: UserAuthHandler-${opt:stage, self:provider.stage}
        EvaluationPeriods: 1
        MetricName: "Errors"
        Namespace: AWS/Lambda
        AlarmActions:
          - !Ref UserAuthHandlerSNSTopic
        OKActions:
          - !Ref UserAuthHandlerSNSTopic
        Period: 300
        Statistic: Sum
        Threshold: 1
        TreatMissingData: notBreaching

    #Alarm for excessive invocations of the lambda. SAVE THE MONEY!! Or detect potential attacks
    UserAuthHandlerInvocationCountAlarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "Too many invocations have happened for this lambda function in a short period of time."
        AlarmName:
          UserAuthHandler-${opt:stage, self:provider.stage}-InvocationAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: UserAuthHandler-${opt:stage, self:provider.stage}
        EvaluationPeriods: 1
        MetricName: "Invocations"
        Namespace: AWS/Lambda
        AlarmActions:
          - !Ref UserAuthHandlerSNSTopic
        OKActions:
          - !Ref UserAuthHandlerSNSTopic
        Period: 300
        Statistic: Sum
        Threshold: 500
        TreatMissingData: notBreaching