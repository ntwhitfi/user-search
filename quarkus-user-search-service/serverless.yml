app: user-search

service:
  name: user-search-service
  description: |
    This service is used to search for user records

frameworkVersion: ">=1.9.0 <2.0.0"

custom:
  props: ${file(env_config/${opt:stage, self:provider.stage}.yml)}

package:
  artifact: ${self:custom.props.artifactPath}

provider:
  name: aws
  runtime: java8
  stage: dev
  region: ${opt:region, self:custom.props.region}
  memorySize: ${self:custom.props.memorySize}
  timeout: ${self:custom.props.timeout}
  deploymentBucket: ${self:custom.props.deploymentBucketName}-${opt:region, self:custom.props.region}
  role: ${self:custom.props.lambdaRole}-${opt:region, self:custom.props.region}

functions:
  UserSearchHandler:
    handler: ntwhitfi.quarkus.user.search.service.handler.UserSearchHandler
    name: UserSearchHandler-${opt:stage, self:provider.stage}
    events:
      - http:
          path: /user
          method: GET
          cors:
            origin: ${self:custom.props.corsOrigin}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Apollo-Tracing
          authorizer:
            arn: arn:aws:lambda:${opt:region, self:custom.props.region}:${self:custom.props.accountId}:function:${self:custom.props.lambdaAuthorizer}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              querystrings:
                type: true
                query: false
            template:
              application/json: '{"type": "$input.params("type")", "query": "$input.params("query")"}'
          integration: lambda
  UserSearchHealthHandler:
    handler: ntwhitfi.quarkus.user.search.service.handler.UserSearchHealthHandler
    name: UserSearchHealthHandler-${opt:stage, self:provider.stage}
    events:
      - http:
          path: /health
          method: GET
          cors:
            origin: ${self:custom.props.corsOrigin}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Apollo-Tracing
          integration: lambda

resources: # CloudFormation template syntax from here on.
  Resources:
    #Create SNS topic to handle sending the CloudWatch alarms
    UserSearchHandlerSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: UserSearchSNSTopic-${opt:stage, self:provider.stage}
        Subscription:
          - Endpoint: ${self:custom.props.sns.endpoint}
            Protocol: ${self:custom.props.sns.protocol}
        Tags: ${self:custom.props.tags}
        TopicName: UserSearchSNSTopic-${opt:stage, self:provider.stage}

    #UserSearchHandler CloudWatch Alarms.

    #Alarm to detect execution errors or errors invoking the lambda function
    UserSearchHandlerInvocationErrorAlarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "An error occurred while invoking the UserSearchHandler Lambda function."
        AlarmName:
          UserSearchHandler-${opt:stage, self:provider.stage}-ErrorAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: UserSearchHandler-${opt:stage, self:provider.stage}
        EvaluationPeriods: 1
        MetricName: "Errors"
        Namespace: AWS/Lambda
        AlarmActions:
          - !Ref UserSearchHandlerSNSTopic
        OKActions:
          - !Ref UserSearchHandlerSNSTopic
        Period: 300
        Statistic: Sum
        Threshold: 1
        TreatMissingData: notBreaching

    #Alarm for excessive invocations of the lambda. SAVE THE MONEY!! Or detect potential attacks
    UserSearchHandlerInvocationCountAlarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "Too many invocations have happened for this lambda function in a short period of time."
        AlarmName:
          UserSearchHandler-${opt:stage, self:provider.stage}-InvocationCountAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: UserSearchHandler-${opt:stage, self:provider.stage}
        EvaluationPeriods: 1
        MetricName: "Invocations"
        Namespace: AWS/Lambda
        AlarmActions:
          - !Ref UserSearchHandlerSNSTopic
        OKActions:
          - !Ref UserSearchHandlerSNSTopic
        Period: 300
        Statistic: Sum
        Threshold: 500
        TreatMissingData: notBreaching

    UserSearchHandlerMetricFilter:
      Type: "AWS::Logs::MetricFilter"
      DependsOn: UserSearchHandlerLambdaFunction
      Properties:
        LogGroupName: "/aws/lambda/UserSearchHandler-${opt:stage, self:provider.stage}"
        FilterPattern: "ERROR Exception"
        MetricTransformations:
          - MetricName: Errors-${opt:stage, self:provider.stage}
            MetricNamespace: UserSearch/UserSearch
            MetricValue: 1

    UserSearchHandlerMetricFilterAlarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "The UserSearchHandler lambda metric filter has caught an error."
        AlarmName:
          UserSearchHandler-${opt:stage, self:provider.stage}-MetricFilterAlarm
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        MetricName: LambdaErrors-${opt:stage, self:provider.stage}
        Namespace: UserSearch/UserSearch
        AlarmActions:
          - !Ref UserSearchHandlerSNSTopic
        OKActions:
          - !Ref UserSearchHandlerSNSTopic
        Period: 300
        Statistic: Sum
        Threshold: 1
        TreatMissingData: notBreaching